fn build_stack_library() {
    let mut contents = String::from("# Machine generated stack manipulation operations\n");

    // # dup (a -- a a)
    // # generated by autoperm
    // dup == `[->+>+<<]>>[-<<+>>]<`;
    // dup (a) == a a;
    //
    let mut add_func = |name: &str, input: &str, output: &str| {
        let bf = autoperm::auto_perm(&format!("{} -- {}", input, output)).unwrap();
        contents += &format!("# {name} ({input} -- {output})\n# generated by autoperm\n{name} == `{bf}`;\n{name} ({input}) == {output};\n\n")
    };

    add_func("dup", "a", "a a");
    add_func("dup2", "a b", "a b a b");
    add_func("drop", "a", "");
    add_func("drop2", "a b", "");
    add_func("swap", "a b", "b a");
    add_func("swap2", "a b c d", "c d a b");
    add_func("over", "a b", "a b a");
    add_func("over2", "a b c d", "a b c d a b");
    add_func("rot", "a b c", "b c a");
    add_func("rot2", "a b c d e f", "c d e f a b");
    add_func("-rot", "a b c", "c a b");
    add_func("-rot2", "a b c d e f", "e f a b c d");
    add_func("nip", "a b", "b");
    add_func("nip2", "a b c d", "c d");
    add_func("tuck", "a b", "b a b");
    add_func("tuck2", "a b c d", "c d a b c d");

    std::fs::write("src/libraries/stack.sero", contents).unwrap();
}

fn main() {
    build_stack_library();

    std::fs::read_dir("src/libraries")
        .unwrap()
        .into_iter()
        .for_each(|lib| {
            println!(
                "cargo:rerun-if-changed=src/libraries/{}",
                lib.unwrap().file_name().to_str().unwrap()
            )
        })
}
